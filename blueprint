blueprint:
  name: Synchronize MiBoxer Remote
  description: Synchronize the sensors of MiBoxer FUT089Z Remote
  domain: automation
  input:
    entity_1:
      name: Select Miboxer Remote
      selector:
        entity:
          multiple: false
    entity_2:
      name: Select Light or Light group
      selector:
        entity:
          multiple: false
    entity_3:
      name: Select Brightness Sensor
      selector:
        entity:
          multiple: false   
    entity_4:
      name: Select Color Temp Slider
      selector:
        entity:
          multiple: false
    entity_5:
      name: Select Color Wheel
      selector:
        entity:
          multiple: false 

  source_url: https://gist.github.com/fireboy1919/997c80db37de30da76f67c5daeaba27b
mode: restart
max_exceeded: silent
variables:
  entity_1: !input entity_1
  entity_2: !input entity_2
  entity_3: !input entity_3
  entity_4: !input entity_4
  entity_5: !input entity_5

trigger:
- platform: state
  entity_id: !input entity_1
- platform: state
  entity_id: !input entity_1
  attribute: brightness
- platform: state
  entity_id: !input entity_2
- platform: state
  entity_id: !input entity_2
  attribute: brightness

condition: []
action:
- choose:
  - conditions:
      condition: template
      value_template: '{{ is_state(trigger.to_state.entity_id, ''on'') }}'
    sequence:
    - service: light.turn_on
      data:
        entity_id: '{% if trigger.from_state.entity_id == entity_1 %} {{ entity_2
          }} {% else %} {{ entity_1 }} {% endif %}'
          
  - conditions:
      condition: template
      value_template: '{{ is_state(trigger.to_state.entity_id, ''off'') }}'
    sequence:
    - service: light.turn_off
      data:
        entity_id: '{% if trigger.from_state.entity_id == entity_1 %} {{ entity_2
          }} {% else %} {{ entity_1 }} {% endif %}'
          
  - conditions:
      condition: template
      value_template: '{{ is_state(trigger.to_state.entity_id, ''brightness_move_to_level'') }}'
    sequence:
    - service: light.turn_on
      data:
        brightness: '{{ states(entity_3) | int }}'
        entity_id: '{% if trigger.from_state.entity_id == entity_1 %} {{ entity_2
          }} {% else %} {{ entity_1 }} {% endif %}'
          
  - conditions:
      condition: template
      value_template: '{{ is_state(trigger.to_state.entity_id, ''color_temperature_move'') }}'
    sequence:
    - service: light.turn_on
      data:
        brightness: '{{ states(entity_3) | int }}'
        color_temp: '{{ states(entity_4) | int }}'
        entity_id: '{% if trigger.from_state.entity_id == entity_1 %} {{ entity_2
          }} {% else %} {{ entity_1 }} {% endif %}'
    
  - conditions:
      condition: template
      value_template: '{{ is_state(trigger.to_state.entity_id, ''move_to_hue_and_saturation'') }}'
    sequence:
    - service: light.turn_on
      data:
        brightness: '{{ states(entity_3) | int }}'
        hs_color:
        - '{{ states(entity_5) | int }}'
        - 100
        entity_id: '{% if trigger.from_state.entity_id == entity_1 %} {{ entity_2
          }} {% else %} {{ entity_1 }} {% endif %}'
